;purple interpreter Chris Kelly
;scanner functions
(define char-buffer '())

(define token-buffer '())

(define init-scanner
  (lambda ()
    (set! char-buffer '())))

(define save-char
  (lambda (char)
    (set! char-buffer char)))

(define next-char
  (lambda ()
    (cond
      [(null? char-buffer) (display-and-return (read-char))]
      [else
        (let ((char char-buffer))
          (begin
            (set! char-buffer '())
            char))])))

(define display-and-return
  (lambda (char)
    (begin
      (display char)
      char)))

(define space?
  (lambda (char)
    (or (eq? char #\space) (eq? char #\newline))))

(define letter?
  (lambda (char)
    (and (>= (char->integer char) (char->integer #\A))
         (<= (char->integer char) (char->integer #\Z)))))

(define digit?
  (lambda (char)
    (or (eq? char #\0) (eq? char #\1) (eq? char #\2) (eq? char #\3)
        (eq? char #\4) (eq? char #\5) (eq? char #\6) (eq? char #\7)
        (eq? char #\8) (eq? char #\9))))

(define symbol?
  (lambda (char)
    (or (eq? char #\~) (eq? char #\;) (eq? char #\+) (eq? char #\-)
        (eq? char #\*) (eq? char #\/) (eq? char #\&) (eq? char #\|)
        (eq? char #\>) (eq? char #\<) (eq? char #\=) (eq? char #\()
        (eq? char #\)) (eq? char #\.))))

(define char->num
  (lambda (char)
    (cond
      [(digit? char) (string->number (make-string 1 char))]
      [else (error "non-digit argument to char->num")])))


(define make-token
  (lambda (type value)
    (cons type (cons value '()))))

(define type
  (lambda (token)
    (first token)))

(define value
  (lambda (token)
    (first (rest token))))

(define next-token
  (lambda ()
    (decide-next-token (next-char))))

(define decide-next-token
  (lambda (current-char)
    (cond
      [(space? current-char) (decide-next-token (next-char))]
      [(symbol? current-char) (symbol-start current-char)]
      [(digit? current-char) (digit-start current-char '0)]
      [(letter? current-char) (letter-start current-char)]
      [else (error "illegal character " current-char)])))

(define symbol-start
  (lambda (current-char)
    (cond
      [(eq? current-char #\+) (make-token 'plus-token '())]
      [(eq? current-char #\*) (make-token 'mult-token '())]
      [(eq? current-char #\/) (make-token 'div-token '())]
      [(eq? current-char #\() (make-token 'left-p-token '())]
      [(eq? current-char #\)) (make-token 'right-p-token '())]
      [(eq? current-char #\.) (make-token 'end-token '())]
      [(eq? current-char #\-) (check-for-minus-token (next-char))]
      [(eq? current-char #\<) (check-for-assign-token (next-char))]
      [(eq? current-char #\|) (check-for-else-token (next-char))]
      [(eq? current-char #\>) (check-for-greater-token (next-char))]
      [(eq? current-char #\&) (make-token 'and-token '())]
      [(eq? current-char #\~) (make-token 'not-token '())]
      [(eq? current-char #\=) (make-token 'equal-token '())]
      [(eq? current-char #\;) (make-token 'semicolon-token '())]
      [else (error "Illegal character: " current-char)])))

;the invariant is that all the digits in digit-start are the base 10
;values of the variable num.
(define digit-start
  (lambda (current-char num)
    (cond
      [(not (digit? current-char)) (begin (save-char current-char) (make-token 'number-token num))]
      [else (digit-start (next-char) (+ (* '10 num) (char->num current-char)))])))

(define check-for-minus-token
  (lambda (following-char)
    (cond
      [(eq? #\> following-char) (make-token 'then-token '())]
      [else (begin (save-char following-char) (make-token 'minus-token '()))])))

(define check-for-assign-token
  (lambda (following-char)
    (cond
      [(eq? #\- following-char) (make-token 'assign-token '())]
      [(eq? #\= following-char) (make-token 'lesseq-token '())]
      [(eq? #\> following-char) (make-token 'noteq-token '())]
      [else (begin (save-char following-char) (make-token 'less-token'()))])))

(define check-for-else-token
  (lambda (following-char)
    (cond
      [(eq? #\| following-char) (make-token 'else-token '())]
      [else (begin (save-char following-char) (make-token 'or-token '()))])))

(define check-for-greater-token
  (lambda (following-char)
    (cond
      [(equal? #\= following-char) (make-token 'greatereq-token '())]
      [else (begin (save-char following-char) (make-token 'greater-token '()))])))

(define letter-start
  (lambda (current-char)
    (cond
      [(eq? current-char #\I) (check-for-in-token (next-char))]
      [(eq? current-char #\O) (check-for-out-token (next-char))]
      [(eq? current-char #\D) (check-for-do-token (next-char))]
      [(eq? current-char #\F) (check-for-fi-token (next-char))]
      [else (make-token 'identifier-token current-char)])))

(define check-for-in-token
  (lambda (following-char)
    (cond
      [(eq? #\N following-char) (make-token 'in-token '())]
      [(eq? #\F following-char) (make-token 'if-token '())]
      [else (begin (save-char following-char) (make-token 'identifier-token #\i))])))

(define check-for-out-token
  (lambda (following-char)
    (cond
      [(eq? #\U following-char) (make-token 'out-token '())]
      [(eq? #\D following-char) (make-token 'od-token '())]
      [else (begin (save-char following-char) (make-token 'identifier-token #\o))])))

(define check-for-do-token
  (lambda (following-char)
    (cond
      [(eq? #\O following-char) (make-token 'do-token '())]
      [else (begin (save-char following-char) (make-token 'identifier-token #\d))])))

(define check-for-fi-token
  (lambda (following-char)
    (cond
      [(eq? #\I following-char) (make-token 'fi-token '())]
      [else (begin (save-char following-char) (make-token 'identifier-token #\f))])))

;parser functions
(define token-buffer '())

(define save-token
  (lambda (token)
    (set! token-buffer token)))

(define get-next-token
  (lambda ()
    (cond
      [(null? token-buffer) (next-token)]
      [else (let ((token token-buffer))
              (begin
                (set! token-buffer '())
                token))])))

(define init-parser
  (lambda ()
    (begin
      (set! token-buffer '())
      (init-scanner))))









;evaluator functions
(define bindings '())

(define init-evaluator
  (lambda ()
    (begin
      (set! bindings
            '((#\A ()) (#\B ()) (#\C ()) (#\D ()) (#\E ()) (#\F ()) (#\G ()) (#\H ())
              (#\I ()) (#\J ()) (#\K ()) (#\L ()) (#\M ()) (#\N ()) (#\O ()) (#\P ())
              (#\Q ()) (#\R ()) (#\S ()) (#\T ()) (#\U ()) (#\V ()) (#\W ()) (#\X ())
              (#\Y ()) (#\Z ())))
      (init-parser))))

